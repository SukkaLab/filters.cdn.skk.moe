/// sukka-defuse-service-worker.js
(function(){"use strict";let e=new Set,r=[];try{window&&!e.has(window)&&(e.add(window),r.push(["window",window]))}catch{}try{window.top&&!e.has(window.top)&&(e.add(window.top),r.push(["window.top",window.top]))}catch{}try{window.self&&!e.has(window.self)&&(e.add(window.self),r.push(["window.self",window.self]))}catch{}let i={info:window.console.info,log:window.console.log,warn:window.console.warn,error:window.console.error};Object.defineProperty(navigator.serviceWorker,"register",{value:async(...e)=>{i.log("[sukka-defuse-service-worker] blocked service worker registration",e);try{let e=await navigator.serviceWorker.getRegistrations();if(e.length>0){for(let r of(i.log("[sukka-defuse-service-worker] unregistering existing registrations:",e),e)){let e=r.active?.scriptURL??r.installing?.scriptURL??r.waiting?.scriptURL??"unknown";await r.unregister()?i.log("[sukka-defuse-service-worker] successfully unregister:",e,r.scope,r):i.log("[sukka-defuse-service-worker] unfinished unregister:",e,r.scope,r)}await Promise.all(e.map(e=>e.unregister())),i.log("[sukka-defuse-service-worker] unregistered all existing registrations!")}}catch(e){i.error("[sukka-defuse-service-worker] error while unregistering existing registrations:",e)}throw Error("")}})})();